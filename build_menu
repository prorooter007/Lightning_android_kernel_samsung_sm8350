#!/bin/bash
# LIGHTNING-KERNEL-BUILD menu based on afaneh menu

# Variables
DIR=`readlink -f .`
OUT_DIR=$DIR/out
PARENT_DIR=`readlink -f ${DIR}/..`

export PLATFORM_VERSION=11
export ANDROID_MAJOR_VERSION=r
export CROSS_COMPILE=$PARENT_DIR/aarch64-linux-android-4.9/bin/aarch64-linux-android-
export CLANG_TRIPLE=$PARENT_DIR/clang-r383902/bin/aarch64-linux-gnu-
export ARCH=arm64
export SEC_BUILD_CONF_VENDOR_BUILD_OS=13
export LINUX_GCC_CROSS_COMPILE_PREBUILTS_BIN=$PARENT_DIR/aarch64-linux-android-4.9/bin
export CLANG_PREBUILT_BIN=$PARENT_DIR/clang-r383902/bin
export PATH=$PATH:$LINUX_GCC_CROSS_COMPILE_PREBUILTS_BIN:$CLANG_PREBUILT_BIN
export LLVM=1
KERNEL_MAKE_ENV="LOCALVERSION=-LightningV1"

# Color
ON_BLUE=`echo -e "\033[44m"`	# On Blue
BRED=`echo -e "\033[1;31m"`	# Bold Red
BBLUE=`echo -e "\033[1;34m"`	# Bold Blue
BGREEN=`echo -e "\033[1;32m"`	# Bold Green
UNDER_LINE=`echo -e "\e[4m"`	# Text Under Line
STD=`echo -e "\033[0m"`		# Text Clear
 
# Functions


download_kernel(){
  if [ ! -d $PARENT_DIR/kernel ]; then
  
    git clone --branch main https://github.com/prorooter007/android_kernel_samsung_exynos2100 $PARENT_DIR/kernel
    . $DIR/build_menu
  fi
}

toolchain(){
  if [ ! -d $PARENT_DIR/aarch64-linux-android-4.9 ]; then
  
    git clone --branch android-9.0.0_r59 https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9 $PARENT_DIR/aarch64-linux-android-4.9
    . $DIR/build_menu
  fi
}

clang(){
  if [ ! -d $PARENT_DIR/clang-r383902 ]; then
    git clone https://github.com/afaneh-toolchain/prebuilts_clang_host_linux-x86_clang-r383902 $PARENT_DIR/clang-r383902
    . $DIR/build_menu
  fi
}


clean(){
  echo "${BGREEN}***** Cleaning in Progress *****${STD}"
  make clean
  make mrproper
  [ -d "$OUT_DIR" ] && rm -rf $OUT_DIR
  echo "${BGREEN}***** Cleaning Done *****${STD}"
 
}

build_kernel(){
  
  echo "${BGREEN}***** Compiling kernel *****${STD}"
  [ ! -d "$OUT_DIR" ] && mkdir $OUT_DIR
  make -j$(nproc) -C $(pwd) $KERNEL_MAKE_ENV lightning_exynos2100-r9sxxx_defconfig
  make -j$(nproc) -C $(pwd) $KERNEL_MAKE_ENV

  [ -e $DIR/arch/arm64/boot/Image.gz ] && cp $DIR/arch/arm64/boot/Image.gz $OUT_DIR/Image.gz
  if [ -e $DIR/arch/arm64/boot/Image ]; then
    cp $DIR/arch/arm64/boot/Image $OUT_DIR/Image

    echo "${BGREEN}***** Ready to Roar *****${STD}"
  fi
}

anykernel3(){
  if [ ! -d $PARENT_DIR/AnyKernel3 ]; then
    git clone https://github.com/osm0sis/AnyKernel3 $PARENT_DIR/AnyKernel3
  fi
  
  if [ -e $DIR/arch/arm64/boot/Image ]; then
    cd $PARENT_DIR/AnyKernel3
    git reset --hard
    cp $DIR/arch/arm64/boot/Image zImage
    sed -i "s/ExampleKernel by osm0sis/exynos2100-r9sxxx Lightning kernel by prorooter007/g" anykernel.sh
    sed -i "s/=maguro/=exynos2100-r9sxxx/g" anykernel.sh
    sed -i "s/=toroplus/=/g" anykernel.sh
    sed -i "s/=toro/=/g" anykernel.sh
    sed -i "s/=tuna/=/g" anykernel.sh
    sed -i "s/platform\/omap\/omap_hsmmc\.0\/by-name\/boot/bootdevice\/by-name\/boot/g" anykernel.sh
    sed -i "s/backup_file/#backup_file/g" anykernel.sh
    sed -i "s/replace_string/#replace_string/g" anykernel.sh
    sed -i "s/insert_line/#insert_line/g" anykernel.sh
    sed -i "s/append_file/#append_file/g" anykernel.sh
    sed -i "s/patch_fstab/#patch_fstab/g" anykernel.sh
    sed -i "s/dump_boot/split_boot/g" anykernel.sh
    sed -i "s/write_boot/flash_boot/g" anykernel.sh
    zip -r9 $PARENT_DIR/exynos2100-r9sxxx_kernel_.zip * -x .git README.md *placeholder
    cd $DIR
    curl https://bashupload.com/$PARENT_DIR/exynos2100-r9sxxx_kernel_.zip --data-binary @$PARENT_DIR/exynos2100-r9sxxx_kernel_.zip
  fi
}

# Run once
download_kernel
toolchain
clang

cd
cd $PARENT_DIR/kernel 

build_kernel
anykernel3